package com.morth.geskou.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;

/**
 * Classe reprÃ©sentant l'association entre un produit et ses matiÃ¨res premiÃ¨res.
 * Chaque produit est liÃ© Ã  plusieurs matiÃ¨res premiÃ¨res avec un pourcentage dÃ©fini.
 */
@Entity
public class PercentageRawMaterial {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id; // ğŸ”¹ Identifiant unique de l'association

    @ManyToOne
    @JoinColumn(name = "raw_material_id", nullable = false) // ğŸ”¹ Chaque association doit avoir une matiÃ¨re premiÃ¨re
    private RawMaterial rawMaterial;

    @Min(0) @Max(100) // ğŸ”¹ S'assure que le pourcentage est toujours entre 0 et 100.
    private double percentage; // ğŸ”¹ Pourcentage de la matiÃ¨re premiÃ¨re dans le produit

    // ğŸ”¹ Constructeur par dÃ©faut nÃ©cessaire pour JPA
    public PercentageRawMaterial() {
    }

    /**
     * Constructeur permettant d'initialiser l'association entre un produit et une matiÃ¨re premiÃ¨re.
     *
     * @param product       Le produit auquel la matiÃ¨re premiÃ¨re est associÃ©e.
     * @param rawMaterial   La matiÃ¨re premiÃ¨re utilisÃ©e dans le produit.
     * @param percentage    Le pourcentage de la matiÃ¨re premiÃ¨re dans la composition du produit (entre 0 et 100).
     */
    public PercentageRawMaterial( RawMaterial rawMaterial, double percentage) {
        this.rawMaterial = rawMaterial;
        this.setPercentage(percentage); // ğŸ”¹ Utilisation du setter pour validation
    }

    // ğŸ”¹ Getters et Setters

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public RawMaterial getRawMaterial() {
        return rawMaterial;
    }

    public void setRawMaterial(RawMaterial rawMaterial) {
        this.rawMaterial = rawMaterial;
    }

    public double getPercentage() {
        return percentage;
    }

    /**
     * DÃ©finit le pourcentage de la matiÃ¨re premiÃ¨re dans le produit.
     * VÃ©rifie que la valeur est entre 0 et 100 avant de l'attribuer.
     *
     * @param percentage Le pourcentage de la matiÃ¨re premiÃ¨re dans la recette du produit.
     */
    public void setPercentage(double percentage) {
        if (percentage < 0 || percentage > 100) {
            throw new IllegalArgumentException("Le pourcentage doit Ãªtre entre 0 et 100");
        }
        this.percentage = percentage;
    }

    /**
     * ReprÃ©sentation textuelle de l'objet pour faciliter le dÃ©bogage.
     *
     * @return ChaÃ®ne de caractÃ¨res contenant les dÃ©tails du produit et de la matiÃ¨re premiÃ¨re associÃ©e.
     */
    @Override
    public String toString() {
        return "ProductRawMaterial [id=" + id + ", product=" + 
               ", rawMaterial=" + rawMaterial.getName() + ", percentage=" + percentage + "]";
    }
}
